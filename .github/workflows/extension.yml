# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: extension

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci --legacy-peer-deps
    - run: npm run build --if-present

    - name: Cache build files
      uses: actions/cache@v3
      id: build-cache
      with:
        path: |
          dist
        key: nim-cache-build-${{ github.event.push.head.sha }}

  test:
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        shard: [1, 2, 3, 4, 5]
        
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Cache build files
      uses: actions/cache@v3
      id: build-cache
      with:
        path: |
          dist
        key: nim-cache-build-${{ github.event.push.head.sha }}
    - run: npm ci --legacy-peer-deps

    - name: Build
      if: steps.build-cache.outputs.cache-hit != 'true'
      run: npm run build --if-present

    - name: Update system (Ubuntu)
      if: matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-18.04'
      run: sudo apt update && sudo apt upgrade -y
      
    - run: npx playwright install-deps
    - run: xvfb-run npm run test -- --shard=${{ matrix.shard }}/${{ strategy.job-total }}

  package:
    needs: test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Cache build files
      uses: actions/cache@v3
      id: build-cache
      with:
        path: |
          dist
        key: nim-cache-build-${{ github.event.push.head.sha }}
    - run: npm ci --legacy-peer-deps

    - name: Build
      if: steps.build-cache.outputs.cache-hit != 'true'
      run: npm run build --if-present
    
    - name: Update manifest
      run: ./scripts/updateManifest.sh
      shell: bash

    - name: Set zip name
      run: echo "ZIP_NAME=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV

    - name: Zip
      run: zip -r ${ZIP_NAME}.zip ./dist ./src/*.js ./manifest.json ./_locales
      shell: bash

    - name: Upload zip artifact
      uses: actions/upload-artifact@v3
      with:
        path: ${{ env.ZIP_NAME }}.zip
  
  post-package-test:
    needs: package
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        shard: [1, 2, 3, 4, 5]
        
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Download package
      uses: actions/download-artifact@v3
      with:
        path: '/tmp'
        
    - name: Unzip
      run: unzip /tmp/artifact/*.zip -d /tmp/artifact

    - name: Set PATH_TO_EXTENSION env
      run: echo "PATH_TO_EXTENSION=/tmp/artifact" >> $GITHUB_ENV

    - run: npm ci --legacy-peer-deps
    - run: npx playwright install-deps
    - run: ls ${{env.PATH_TO_EXTENSION}}
    - run: export PATH_TO_EXTENSION=${{env.PATH_TO_EXTENSION}} && xvfb-run npm run test:post -- --shard=${{ matrix.shard }}/${{ strategy.job-total }}

  deploy:
    needs: post-package-test
    runs-on: ubuntu-latest
        
    steps:
      - name: Download package
        uses: actions/download-artifact@v3
        with:
          path: '/tmp'
    
      - name: Publish using Microsoft Partner Center Publish API
        run: |
          productID=c5bd8ac5-4b9b-4aa2-8cdb-dd91b6e22a5d
          certificationNotes=$(echo "{
              \"notes\": \"Thank you!  =)\"
          }")

          # Uploading a package to update an existing submission
          echo "Uploading a package to update an existing submission"
          response=$(curl -s -i -D /tmp/headers -w 'status: %{response_code}\n' https://api.addons.microsoftedge.microsoft.com/v1/products/$productID/submissions/draft/package \
            -H 'Authorization: Bearer ${{ secrets.MPC_API_KEY }}' \
            -H 'Content-Type: application/zip' \
            -d /tmp/artifact/${{ env.ZIP_NAME }}.zip)
          if [ -n "$(echo $response | egrep "status:\s*202")" ]; then
            operationID=$(cat /tmp/headers | egrep "location:\s*" | cut -f2 -d":" | awk '{$1=$1};1')
            # Checking the status of a package upload
            echo "Checking the status of a package upload"
            response=$(curl -s -w 'status: %{response_code}\n' https://api.addons.microsoftedge.microsoft.com/v1/products/$productID/submissions/draft/package/operations/$operationID \
              -H 'Authorization: Bearer ${{ secrets.MPC_API_KEY }}')
            while [ -z $(echo response | egrep "status:\s*200")]; do
              sleep 5
              response=$(curl -s -w 'status: %{response_code}\n' https://api.addons.microsoftedge.microsoft.com/v1/products/$productID/submissions/draft/package/operations/$operationID \
                -H 'Authorization: Bearer ${{ secrets.MPC_API_KEY }}')
            done
            # Publishing the submission
            echo "Publishing the submission"
            response=$(curl -s -i -D /tmp/headers2 -w 'status: %{response_code}\n' /v1/products/$productID/submissions \
              -H 'Authorization: Bearer ${{ secrets.MPC_API_KEY }}' \
              -d "$certificationNotes")
            if [ -n "$(echo $response | egrep "status:\s*202")" ]; then
              operationID=$(cat /tmp/headers2 | egrep "location:\s*" | cut -f2 -d":" | awk '{$1=$1};1')
              # Checking the publishing status
              response=$(curl -s -w 'status: %{response_code}\n' /v1/products/$productID/submissions/operations/$operationID \
                -H 'Authorization: Bearer ${{ secrets.MPC_API_KEY }}')
              while [ -z $(echo response | egrep "status:\s*200")]; do
                sleep 5
                response=$(curl -s -w 'status: %{response_code}\n' /v1/products/$productID/submissions/operations/$operationID \
                  -H 'Authorization: Bearer ${{ secrets.MPC_API_KEY }}')
              done
            fi
          fi
        shell: bash
          